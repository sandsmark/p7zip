diff --git a/CPP/7zip/UI/Common/ArchiveExtractCallback.cpp b/CPP/7zip/UI/Common/ArchiveExtractCallback.cpp
index fa14655..de2f2e0 100644
--- a/CPP/7zip/UI/Common/ArchiveExtractCallback.cpp
+++ b/CPP/7zip/UI/Common/ArchiveExtractCallback.cpp
@@ -1341,13 +1341,35 @@ Hunk #8, a/CPP/7zip/UI/Common/ArchiveExtractCallback.cpp if (askExtractMode == NArchive::NExtract::NAskMode::kExtract && !_testMode)
             // UInt64 ticks = GetCpuTicks();
             bool res = _outFileStreamSpec->File.SetLength(_curSize);
             _fileLengthWasSet = res;
-            _outFileStreamSpec->File.SeekToBegin();
+
             // ticks = GetCpuTicks() - ticks;
             // printf("\nticks = %10d\n", (unsigned)ticks);
             if (!res)
             {
               RINOK(SendMessageError_with_LastError(kCantSetFileLen, fullProcessedPath));
             }
+
+            /*
+            _outFileStreamSpec->File.Close();
+            ticks = GetCpuTicks() - ticks;
+            printf("\nticks = %10d\n", (unsigned)ticks);
+            return S_FALSE;
+            */
+
+            /*
+              File.SetLength() on FAT (xp64): is fast, but then File.Close() can be slow,
+              if we don't write any data.
+              File.SetLength() for remote share file (exFAT) can be slow in some cases,
+              and the Windows can return "network error" after 1 minute,
+              while remote file still can grow.
+              We need some way to detect such bad cases and disable PreAllocateOutFile mode.
+            */
+
+            res = _outFileStreamSpec->File.SeekToBegin();
+            if (!res)
+            {
+              RINOK(SendMessageError_with_LastError("Can not seek to begin of file", fullProcessedPath));
+            }
           }
 
           #ifdef SUPPORT_ALT_STREAMS
