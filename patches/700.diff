diff --git a/CPP/7zip/Compress/Lzma2Decoder.cpp b/CPP/7zip/Compress/Lzma2Decoder.cpp
index 98af203..653fe2d 100644
--- a/CPP/7zip/Compress/Lzma2Decoder.cpp
+++ b/CPP/7zip/Compress/Lzma2Decoder.cpp
@@ -95,109 +95,51 @@ Hunk #3, a/CPP/7zip/Compress/Lzma2Decoder.cpp STDMETHODIMP CDecoder::GetInStreamProcessedSize(UInt64 *value)
 }
 
 
-STDMETHODIMP CDecoder::Code(ISequentialInStream *inStream, ISequentialOutStream *outStream,
-    const UInt64 *inSize, const UInt64 *outSize, ICompressProgressInfo *progress)
+#ifndef _7ZIP_ST
+
+STDMETHODIMP CDecoder::SetNumberOfThreads(UInt32 numThreads)
 {
-  if (!_inBuf)
-    return S_FALSE;
-
-  SetOutStreamSize(outSize);
-
-  SizeT wrPos = _state.decoder.dicPos;
-  HRESULT readRes = S_OK;
-
-  for (;;)
-  {
-    if (_inPos == _inLim && readRes == S_OK)
-    {
-      _inPos = _inLim = 0;
-      readRes = inStream->Read(_inBuf, _inBufSize, &_inLim);
-    }
-
-    const SizeT dicPos = _state.decoder.dicPos;
-    SizeT size;
-    {
-      SizeT next = _state.decoder.dicBufSize;
-      if (next - wrPos > _outStep)
-        next = wrPos + _outStep;
-      size = next - dicPos;
-    }
-
-    ELzmaFinishMode finishMode = LZMA_FINISH_ANY;
-    if (_outSizeDefined)
-    {
-      const UInt64 rem = _outSize - _outProcessed;
-      if (size >= rem)
-      {
-        size = (SizeT)rem;
-        if (_finishMode)
-          finishMode = LZMA_FINISH_END;
-      }
-    }
-
-    SizeT inProcessed = _inLim - _inPos;
-    ELzmaStatus status;
-    
-    SRes res = Lzma2Dec_DecodeToDic(&_state, dicPos + size, _inBuf + _inPos, &inProcessed, finishMode, &status);
-
-    
-    _inPos += (UInt32)inProcessed;
-    _inProcessed += inProcessed;
-    const SizeT outProcessed = _state.decoder.dicPos - dicPos;
-    _outProcessed += outProcessed;
-
-    
-    bool outFinished = (_outSizeDefined && _outProcessed >= _outSize);
-
-    bool needStop = (res != 0
-        || (inProcessed == 0 && outProcessed == 0)
-        || status == LZMA_STATUS_FINISHED_WITH_MARK
-        || (!_finishMode && outFinished));
-
-    if (needStop || outProcessed >= size)
-    {
-      HRESULT res2 = WriteStream(outStream, _state.decoder.dic + wrPos, _state.decoder.dicPos - wrPos);
-
-      if (_state.decoder.dicPos == _state.decoder.dicBufSize)
-        _state.decoder.dicPos = 0;
-      wrPos = _state.decoder.dicPos;
-
-      RINOK(res2);
-
-      if (needStop)
-      {
-        if (res != 0)
-          return S_FALSE;
-
-        if (status == LZMA_STATUS_FINISHED_WITH_MARK)
-        {
-          if (_finishMode)
-          {
-            if (inSize && *inSize != _inProcessed)
-              return S_FALSE;
-            if (_outSizeDefined && _outSize != _outProcessed)
-              return S_FALSE;
-          }
-          return readRes;
-        }
-
-        if (!_finishMode && outFinished)
-          return readRes;
-   
-        return S_FALSE;
-      }
-    }
-    
-    if (progress)
-    {
-      RINOK(progress->SetRatioInfo(&_inProcessed, &_outProcessed));
-    }
-  }
+  _numThreads = numThreads;
+  return S_OK;
 }
 
+STDMETHODIMP CDecoder::SetMemLimit(UInt64 memUsage)
+{
+  _memUsage = memUsage;
+  return S_OK;
+}
+
+#endif
+
 
 #ifndef NO_READ_FROM_CODER
 
+STDMETHODIMP CDecoder::SetOutStreamSize(const UInt64 *outSize)
+{
+  CLzma2DecMtProps props;
+  Lzma2DecMtProps_Init(&props);
+  props.inBufSize_ST = _inBufSize;
+  props.outStep_ST = _outStep;
+
+  _inProcessed = 0;
+
+  if (!_dec)
+  {
+    _dec = Lzma2DecMt_Create(&g_AlignedAlloc, &g_MidAlloc);
+    if (!_dec)
+      return E_OUTOFMEMORY;
+  }
+
+  _inWrap.Init(_inStream);
+
+  SRes res = Lzma2DecMt_Init(_dec, _prop, &props, outSize, _finishMode, &_inWrap.vt);
+
+  if (res != SZ_OK)
+    return SResToHRESULT(res);
+  return S_OK;
+}
+
+
 STDMETHODIMP CDecoder::SetInStream(ISequentialInStream *inStream) { _inStream = inStream; return S_OK; }
 STDMETHODIMP CDecoder::ReleaseInStream() { _inStream.Release(); return S_OK; }
   
