diff --git a/CPP/7zip/Compress/Lzma2Decoder.cpp b/CPP/7zip/Compress/Lzma2Decoder.cpp
index 98af203..653fe2d 100644
--- a/CPP/7zip/Compress/Lzma2Decoder.cpp
+++ b/CPP/7zip/Compress/Lzma2Decoder.cpp
@@ -207,62 +207,17 @@ Hunk #4, a/CPP/7zip/Compress/Lzma2Decoder.cpp STDMETHODIMP CDecoder::Read(void *data, UInt32 size, UInt32 *processedSize)
   if (processedSize)
     *processedSize = 0;
 
-  ELzmaFinishMode finishMode = LZMA_FINISH_ANY;
-  if (_outSizeDefined)
-  {
-    const UInt64 rem = _outSize - _outProcessed;
-    if (size >= rem)
-    {
-      size = (UInt32)rem;
-      if (_finishMode)
-        finishMode = LZMA_FINISH_END;
-    }
-  }
+  size_t size2 = size;
+  UInt64 inProcessed = 0;
 
-  HRESULT readRes = S_OK;
+  SRes res = Lzma2DecMt_Read(_dec, (Byte *)data, &size2, &inProcessed);
 
-  for (;;)
-  {
-    if (_inPos == _inLim && readRes == S_OK)
-    {
-      _inPos = _inLim = 0;
-      readRes = _inStream->Read(_inBuf, _inBufSize, &_inLim);
-    }
-    
-    SizeT inProcessed = _inLim - _inPos;
-    SizeT outProcessed = size;
-    ELzmaStatus status;
-
-    SRes res = Lzma2Dec_DecodeToBuf(&_state, (Byte *)data, &outProcessed,
-        _inBuf + _inPos, &inProcessed, finishMode, &status);
-    
-    
-    _inPos += (UInt32)inProcessed;
-    _inProcessed += inProcessed;
-    _outProcessed += outProcessed;
-    size -= (UInt32)outProcessed;
-    data = (Byte *)data + outProcessed;
-    if (processedSize)
-      *processedSize += (UInt32)outProcessed;
-    
-    if (res != 0)
-      return S_FALSE;
-    
-    /*
-    if (status == LZMA_STATUS_FINISHED_WITH_MARK)
-      return readRes;
-
-    if (size == 0 && status != LZMA_STATUS_NEEDS_MORE_INPUT)
-    {
-      if (_finishMode && _outSizeDefined && _outProcessed >= _outSize)
-        return S_FALSE;
-      return readRes;
-    }
-    */
-
-    if (inProcessed == 0 && outProcessed == 0)
-      return readRes;
-  }
+  _inProcessed += inProcessed;
+  if (processedSize)
+    *processedSize = (UInt32)size2;
+  if (res != SZ_OK)
+    return SResToHRESULT(res);
+  return S_OK;
 }
 
 #endif
