diff --git a/C/XzDec.c b/C/XzDec.c
index 67216a5..395e83f 100644
--- a/C/XzDec.c
+++ b/C/XzDec.c
@@ -715,34 +715,34 @@ Hunk #22, a/C/XzDec.c SRes XzUnpacker_Code(CXzUnpacker *p, Byte *dest, SizeT *destLen,
         if (p->block.packSize == p->packSize
             && *status == CODER_STATUS_NEEDS_MORE_INPUT)
         {
+          PRF_STR("CODER_STATUS_NEEDS_MORE_INPUT");
           *status = CODER_STATUS_NOT_SPECIFIED;
           return SZ_ERROR_DATA;
         }
         
-        // if (srcLen2 == 0 && destLen2 == 0)
         return SZ_OK;
       }
       {
-        Byte temp[32];
-        unsigned num = Xz_WriteVarInt(temp, XzUnpacker_GetPackSizeForIndex(p));
-        num += Xz_WriteVarInt(temp + num, p->unpackSize);
-        Sha256_Update(&p->sha, temp, num);
-        p->indexSize += num;
-        p->numBlocks++;
+        XzUnpacker_UpdateIndex(p, XzUnpacker_GetPackSizeForIndex(p), p->unpackSize);
         p->state = XZ_STATE_BLOCK_FOOTER;
         p->pos = 0;
         p->alignPos = 0;
-        
-        if (p->block.unpackSize != (UInt64)(Int64)-1)
-          if (p->block.unpackSize != p->unpackSize)
-            return SZ_ERROR_DATA;
+        *status = CODER_STATUS_NOT_SPECIFIED;
+
+        if ((p->block.packSize != (UInt64)(Int64)-1 && p->block.packSize != p->packSize)
+           || (p->block.unpackSize != (UInt64)(Int64)-1 && p->block.unpackSize != p->unpackSize))
+        {
+          PRF_STR("ERROR: block.size mismatch");
+          return SZ_ERROR_DATA;
+        }
       }
       // continue;
     }
 
     srcRem = srcLenOrig - *srcLen;
 
-    if (srcRem == 0)
+    // XZ_STATE_BLOCK_FOOTER can transit to XZ_STATE_BLOCK_HEADER without input bytes
+    if (srcRem == 0 && p->state != XZ_STATE_BLOCK_FOOTER)
     {
       *status = CODER_STATUS_NEEDS_MORE_INPUT;
       return SZ_OK;
