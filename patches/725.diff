diff --git a/CPP/7zip/Compress/Rar1Decoder.cpp b/CPP/7zip/Compress/Rar1Decoder.cpp
index 0a55250..6b55705 100644
--- a/CPP/7zip/Compress/Rar1Decoder.cpp
+++ b/CPP/7zip/Compress/Rar1Decoder.cpp
@@ -265,57 +265,62 @@ Hunk #10, a/CPP/7zip/Compress/Rar1Decoder.cpp HRESULT CDecoder::HuffDecode()
   UInt32 curByte, newBytePlace;
   UInt32 len;
   UInt32 dist;
-  int bytePlace;
-
-  if      (AvrPlc > 0x75ff)  bytePlace = DecodeNum(PosHf4);
-  else if (AvrPlc > 0x5dff)  bytePlace = DecodeNum(PosHf3);
-  else if (AvrPlc > 0x35ff)  bytePlace = DecodeNum(PosHf2);
-  else if (AvrPlc > 0x0dff)  bytePlace = DecodeNum(PosHf1);
-  else                       bytePlace = DecodeNum(PosHf0);
+  unsigned bytePlace;
+  {
+    const Byte *tab;
+    
+    if      (AvrPlc >= 0x7600)  tab = PosHf4;
+    else if (AvrPlc >= 0x5e00)  tab = PosHf3;
+    else if (AvrPlc >= 0x3600)  tab = PosHf2;
+    else if (AvrPlc >= 0x0e00)  tab = PosHf1;
+    else                        tab = PosHf0;
+    
+    bytePlace = DecodeNum(tab); // [0, 256]
+  }
   
   if (StMode)
   {
-    if (--bytePlace == -1)
+    if (bytePlace == 0)
     {
       if (ReadBits(1))
       {
-        NumHuf = StMode = 0;
+        NumHuf = 0;
+        StMode = false;
         return S_OK;
       }
-      else
-      {
-        len = (ReadBits(1)) ? 4 : 3;
-        dist = DecodeNum(PosHf2);
-        dist = (dist << 5) | ReadBits(5);
-        return CopyBlock(dist - 1, len);
-      }
+      len = ReadBits(1) + 3;
+      dist = DecodeNum(PosHf2);
+      dist = (dist << 5) | ReadBits(5);
+      if (dist == 0)
+        return S_FALSE;
+      return CopyBlock(dist - 1, len);
     }
+    bytePlace--; // bytePlace is [0, 255]
   }
   else if (NumHuf++ >= 16 && FlagsCnt == 0)
-    StMode = 1;
+    StMode = true;
   
   bytePlace &= 0xff;
   AvrPlc += bytePlace;
   AvrPlc -= AvrPlc >> 8;
-  Nhfb+=16;
+  Nhfb += 16;
   
   if (Nhfb > 0xff)
   {
-    Nhfb=0x90;
+    Nhfb = 0x90;
     Nlzb >>= 1;
   }
 
-  m_UnpackSize --;
+  m_UnpackSize--;
   m_OutWindowStream.PutByte((Byte)(ChSet[bytePlace] >> 8));
 
   for (;;)
   {
     curByte = ChSet[bytePlace];
     newBytePlace = NToPl[curByte++ & 0xff]++;
-    if ((curByte & 0xff) > 0xa1)
-      CorrHuff(ChSet, NToPl);
-    else
+    if ((curByte & 0xff) <= 0xa1)
       break;
+    CorrHuff(ChSet, NToPl);
   }
 
   ChSet[bytePlace] = ChSet[newBytePlace];
