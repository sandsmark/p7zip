diff --git a/CPP/7zip/UI/Common/Bench.cpp b/CPP/7zip/UI/Common/Bench.cpp
index d0fead7..f849a87 100644
--- a/CPP/7zip/UI/Common/Bench.cpp
+++ b/CPP/7zip/UI/Common/Bench.cpp
@@ -94,80 +94,33 @@ Hunk #3, a/CPP/7zip/UI/Common/Bench.cpp static const UInt32 kAdditionalSize = (1 << 16);
 static const UInt32 kCompressedAdditionalSize = (1 << 10);
 static const UInt32 kMaxLzmaPropSize = 5;
 
+
+
+#define ALLOC_WITH_HRESULT(_buffer_, _size_) \
+  (_buffer_)->Alloc(_size_); \
+  if (!(_buffer_)->IsAllocated()) return E_OUTOFMEMORY;
+
+
 class CBaseRandomGenerator
 {
   UInt32 A1;
   UInt32 A2;
+  UInt32 Salt;
 public:
-  CBaseRandomGenerator() { Init(); }
+  CBaseRandomGenerator(UInt32 salt = 0): Salt(salt) { Init(); }
   void Init() { A1 = 362436069; A2 = 521288629;}
   UInt32 GetRnd()
   {
-    return
+    return Salt ^
+    (
       ((A1 = 36969 * (A1 & 0xffff) + (A1 >> 16)) << 16) +
-      ((A2 = 18000 * (A2 & 0xffff) + (A2 >> 16)) );
+      ((A2 = 18000 * (A2 & 0xffff) + (A2 >> 16)) )
+    );
   }
 };
 
 
-static const unsigned kBufferAlignment = 1 << 4;
-
-struct CBenchBuffer
-{
-  size_t BufferSize;
-
-  #ifdef _WIN32
-
-  Byte *Buffer;
-
-  CBenchBuffer(): BufferSize(0), Buffer(NULL) {}
-  ~CBenchBuffer() { ::MidFree(Buffer); }
-  
-  void AllocAlignedMask(size_t size, size_t)
-  {
-    ::MidFree(Buffer);
-    BufferSize = 0;
-    Buffer = (Byte *)::MidAlloc(size);
-    if (Buffer)
-      BufferSize = size;
-  }
-  
-  #else
-  
-  Byte *Buffer;
-  Byte *_bufBase;
-
-  CBenchBuffer(): BufferSize(0), Buffer(NULL), _bufBase(NULL){}
-  ~CBenchBuffer() { ::MidFree(_bufBase); }
-  
-  void AllocAlignedMask(size_t size, size_t alignMask)
-  {
-    ::MidFree(_bufBase);
-    Buffer = NULL;
-    BufferSize = 0;
-    _bufBase = (Byte *)::MidAlloc(size + alignMask);
-    
-    if (_bufBase)
-    {
-      // Buffer = (Byte *)(((uintptr_t)_bufBase + alignMask) & ~(uintptr_t)alignMask);
-         Buffer = (Byte *)(((ptrdiff_t)_bufBase + alignMask) & ~(ptrdiff_t)alignMask);
-      BufferSize = size;
-    }
-  }
-
-  #endif
-
-  bool Alloc(size_t size)
-  {
-    if (Buffer && BufferSize == size)
-      return true;
-    AllocAlignedMask(size, kBufferAlignment - 1);
-    return (Buffer != NULL || size == 0);
-  }
-};
-
-
-class CBenchRandomGenerator: public CBenchBuffer
+class CBenchRandomGenerator: public CAlignedBuffer
 {
   static UInt32 GetVal(UInt32 &res, unsigned numBits)
   {
