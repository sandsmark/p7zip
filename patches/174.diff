diff --git a/C/LzmaEnc.c b/C/LzmaEnc.c
index 9b7e691..46a0db0 100644
--- a/C/LzmaEnc.c
+++ b/C/LzmaEnc.c
@@ -278,69 +278,77 @@ Hunk #10, a/C/LzmaEnc.c typedef struct
 {
   CLzmaProb *litProbs;
 
-  UInt32 state;
+  unsigned state;
   UInt32 reps[LZMA_NUM_REPS];
 
-  CLzmaProb isMatch[kNumStates][LZMA_NUM_PB_STATES_MAX];
+  CLzmaProb posAlignEncoder[1 << kNumAlignBits];
   CLzmaProb isRep[kNumStates];
   CLzmaProb isRepG0[kNumStates];
   CLzmaProb isRepG1[kNumStates];
   CLzmaProb isRepG2[kNumStates];
+  CLzmaProb isMatch[kNumStates][LZMA_NUM_PB_STATES_MAX];
   CLzmaProb isRep0Long[kNumStates][LZMA_NUM_PB_STATES_MAX];
 
   CLzmaProb posSlotEncoder[kNumLenToPosStates][1 << kNumPosSlotBits];
-  CLzmaProb posEncoders[kNumFullDistances - kEndPosModelIndex];
-  CLzmaProb posAlignEncoder[1 << kNumAlignBits];
+  CLzmaProb posEncoders[kNumFullDistances];
   
-  CLenPriceEnc lenEnc;
-  CLenPriceEnc repLenEnc;
+  CLenEnc lenProbs;
+  CLenEnc repLenProbs;
+
 } CSaveState;
 
 
+typedef UInt32 CProbPrice;
+
+
 typedef struct
 {
   void *matchFinderObj;
   IMatchFinder matchFinder;
 
-  UInt32 optimumEndIndex;
-  UInt32 optimumCurrentIndex;
+  unsigned optCur;
+  unsigned optEnd;
 
-  UInt32 longestMatchLength;
-  UInt32 numPairs;
+  unsigned longestMatchLen;
+  unsigned numPairs;
   UInt32 numAvail;
 
-  UInt32 numFastBytes;
-  UInt32 additionalOffset;
+  unsigned state;
+  unsigned numFastBytes;
+  unsigned additionalOffset;
   UInt32 reps[LZMA_NUM_REPS];
-  UInt32 state;
+  unsigned lpMask, pbMask;
+  CLzmaProb *litProbs;
+  CRangeEnc rc;
+
+  UInt32 backRes;
 
   unsigned lc, lp, pb;
-  unsigned lpMask, pbMask;
   unsigned lclp;
 
-  CLzmaProb *litProbs;
-
-  Bool fastMode;
-  Bool writeEndMark;
-  Bool finished;
-  Bool multiThread;
-  Bool needInit;
+  BoolInt fastMode;
+  BoolInt writeEndMark;
+  BoolInt finished;
+  BoolInt multiThread;
+  BoolInt needInit;
+  // BoolInt _maxMode;
 
   UInt64 nowPos64;
   
-  UInt32 matchPriceCount;
-  UInt32 alignPriceCount;
+  unsigned matchPriceCount;
+  // unsigned alignPriceCount;
+  int repLenEncCounter;
 
-  UInt32 distTableSize;
+  unsigned distTableSize;
 
   UInt32 dictSize;
   SRes result;
 
-  CRangeEnc rc;
-
   #ifndef _7ZIP_ST
-  Bool mtMode;
+  BoolInt mtMode;
+  // begin of CMatchFinderMt is used in LZ thread
   CMatchFinderMt matchFinderMt;
+  // end of CMatchFinderMt is used in BT and HASH threads
   #endif
 
   CMatchFinder matchFinderBase;
