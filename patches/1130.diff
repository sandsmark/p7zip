diff --git a/CPP/7zip/UI/FileManager/ProgressDialog2.h b/CPP/7zip/UI/FileManager/ProgressDialog2.h
index 03f836d..6c4213a 100644
--- a/CPP/7zip/UI/FileManager/ProgressDialog2.h
+++ b/CPP/7zip/UI/FileManager/ProgressDialog2.h
@@ -281,33 +281,59 @@ Hunk #3, a/CPP/7zip/UI/FileManager/ProgressDialog2.h class CProgressThreadVirt
 
   // error if any of HRESULT, ErrorMessage, ErrorPath
   virtual HRESULT ProcessVirt() = 0;
-  void Process();
 public:
   HRESULT Result;
   bool ThreadFinishedOK; // if there is no fatal exception
-  CProgressDialog ProgressDialog;
-
-  static THREAD_FUNC_DECL MyThreadFunction(void *param)
-  {
-    CProgressThreadVirt *p = (CProgressThreadVirt *)param;
-    try
-    {
-      p->Process();
-      p->ThreadFinishedOK = true;
-    }
-    catch (...) { p->Result = E_FAIL; }
-    return 0;
-  }
 
+  void Process();
   void AddErrorPath(const FString &path) { ErrorPaths.Add(path); }
 
   HRESULT Create(const UString &title, HWND parentWindow = 0);
   CProgressThreadVirt(): Result(E_FAIL), ThreadFinishedOK(false) {}
 
   CProgressMessageBoxPair &GetMessagePair(bool isError) { return isError ? FinalMessage.ErrorMessage : FinalMessage.OkMessage; }
-
 };
 
 UString HResultToMessage(HRESULT errorCode);
 
+/*
+how it works:
+
+client code inherits CProgressThreadVirt and calls
+CProgressThreadVirt::Create()
+{
+  it creates new thread that calls CProgressThreadVirt::Process();
+  it creates modal progress dialog window with ProgressDialog.Create()
+}
+
+CProgressThreadVirt::Process()
+{
+  {
+    ProcessVirt(); // virtual function that must implement real work
+  }
+  if (exceptions) or FinalMessage.ErrorMessage.Message
+  {
+    set message to ProgressDialog.Sync.FinalMessage.ErrorMessage.Message
+  }
+  else if (FinalMessage.OkMessage.Message)
+  {
+    set message to ProgressDialog.Sync.FinalMessage.OkMessage
+  }
+
+  PostMsg(kCloseMessage);
+}
+
+
+CProgressDialog::OnExternalCloseMessage()
+{
+  if (ProgressDialog.Sync.FinalMessage)
+  {
+    WorkWasFinishedVirt();
+    Show (ProgressDialog.Sync.FinalMessage)
+    MessagesDisplayed = true;
+  }
+}
+
+*/
+
 #endif
