diff --git a/CPP/7zip/Compress/Rar5Decoder.cpp b/CPP/7zip/Compress/Rar5Decoder.cpp
index 64cce79..d7c68e2 100644
--- a/CPP/7zip/Compress/Rar5Decoder.cpp
+++ b/CPP/7zip/Compress/Rar5Decoder.cpp
@@ -334,58 +334,63 @@ Hunk #2, a/CPP/7zip/Compress/Rar5Decoder.cpp HRESULT CDecoder::ReadTables(CBitDecoder &_bitStream)
 {
   if (_progress)
   {
-    UInt64 packSize = _bitStream.GetProcessedSize();
+    const UInt64 packSize = _bitStream.GetProcessedSize();
     RINOK(_progress->SetRatioInfo(&packSize, &_writtenFileSize));
   }
 
   _bitStream.AlignToByte();
   _bitStream.Prepare();
   
-  unsigned flags = _bitStream.ReadByteInAligned();
-  unsigned checkSum = _bitStream.ReadByteInAligned();
-  checkSum ^= flags;
-
-  UInt32 blockSize;
   {
+    unsigned flags = _bitStream.ReadByteInAligned();
+    unsigned checkSum = _bitStream.ReadByteInAligned();
+    checkSum ^= flags;
     unsigned num = (flags >> 3) & 3;
     if (num == 3)
       return S_FALSE;
-    blockSize = _bitStream.ReadByteInAligned();
-    if (num > 0)
+    UInt32 blockSize = _bitStream.ReadByteInAligned();
+    checkSum ^= blockSize;
+
+    if (num != 0)
     {
-      blockSize += (UInt32)_bitStream.ReadByteInAligned() << 8;
+      unsigned b = _bitStream.ReadByteInAligned();
+      checkSum ^= b;
+      blockSize += (UInt32)b << 8;
       if (num > 1)
-        blockSize += (UInt32)_bitStream.ReadByteInAligned() << 16;
+      {
+        b = _bitStream.ReadByteInAligned();
+        checkSum ^= b;
+        blockSize += (UInt32)b << 16;
+      }
     }
-  }
-
-  checkSum ^= blockSize ^ (blockSize >> 8) ^ (blockSize >> 16);
-  if ((Byte)checkSum != 0x5A)
-    return S_FALSE;
-
-  unsigned blockSizeBits7 = (flags & 7) + 1;
-
-  if (blockSize == 0 && blockSizeBits7 != 8)
-    return S_FALSE;
-
-  blockSize += (blockSizeBits7 >> 3);
-  blockSize--;
-
-  _bitStream._blockEndBits7 = (Byte)(blockSizeBits7 & 7);
-  _bitStream._blockEnd = _bitStream.GetProcessedSize_Round() + blockSize;
-
-  _bitStream.SetCheck2();
-
-  _isLastBlock = ((flags & 0x40) != 0);
-
-  if ((flags & 0x80) == 0)
-  {
-    if (!_tableWasFilled && blockSize != 0)
+    
+    if (checkSum != 0x5A)
       return S_FALSE;
-    return S_OK;
-  }
 
-  _tableWasFilled = false;
+    unsigned blockSizeBits7 = (flags & 7) + 1;
+    blockSize += (blockSizeBits7 >> 3);
+    if (blockSize == 0)
+      return S_FALSE;
+    blockSize--;
+    blockSizeBits7 &= 7;
+
+    _bitStream._blockEndBits7 = (Byte)blockSizeBits7;
+    _bitStream._blockEnd = _bitStream.GetProcessedSize_Round() + blockSize;
+    
+    _bitStream.SetCheck2();
+    
+    _isLastBlock = ((flags & 0x40) != 0);
+    
+    if ((flags & 0x80) == 0)
+    {
+      if (!_tableWasFilled)
+        if (blockSize != 0 || blockSizeBits7 != 0)
+          return S_FALSE;
+      return S_OK;
+    }
+    
+    _tableWasFilled = false;
+  }
 
   {
     Byte lens2[kLevelTableSize];
